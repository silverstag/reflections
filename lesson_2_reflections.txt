What happens when you initialize a repository? Why do you need to do it?
I think Git would build a tree of information regarding the directory and store metadata
related to everything in the given directory.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
Staging area is for pooling logically related files together. It is temporary and 
is visible only until a commit is done. Unlike working directory, staging area
ceases to exit once a commit is done.

git add file_name -> Add a file to staging area
git status -> Show status of a repository. Staged files, files yet to be added and so on.
git commit -> Commit all changes in staging area to repository
git diff -> Show diff of working directory and staging area. This means Git will show
you all changes you made to your repo since the last staging.
git diff --staged -> Show a diff between staging area and the most recent commit.
git diff commit1 commit2 -> Show a diff between commit1 and commit2

How can you use the staging area to make sure you have one commit per logical change?
When you have changed multiple files in your working directory, staging area allows 
you to group these changes into a logical unit. You can add only related changes to
the staging area so you can commit them all as one logical unit. Which is how 
commits are defined in Git. 

What are some situations when branches would be helpful in keeping your 
history organized? How would branches help?
Adding new features that I don't want to disrupt production code is where
branches will be helpful. I can work on production fixes and new features
simultaneously and only introduce features in production when I'm 
certain they will not break production code.

git branch -> Show the current branch
git branch branch_name -> Create a new Git branch.
git checkout branch_name -> Checkout a specific branch.

How do the diagrams help you visualize the branch structure?
Diagrams can help me visualize branches in Git.

What is the result of merging two branches together? Why do we represent 
it in the diagram the way we do?
Merging two branches will compare all files in each of the branches
with their originals (parent) at the time the branch was created.
After merging commits in both branches are ordered by their timestamps.
As a side effect of this, we will not know the parent commit of some 
commits. 'git show <commit_id>' can show the diff between a commit and
its parent in these cases.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing 
merges manually?
Automatic merges save time. Conflicts can be resolved and Git does most 
of the work anyway. We only need to look at files that have conflicts.

Manual merges are a pain. 